{"version":3,"sources":["skylark-redux.js"],"names":["define","Symbol","observable","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","obj","proto","Object","getPrototypeOf","miniKindOf","val","type","Array","isArray","Date","toDateString","getDate","setDate","isDate","Error","message","constructor","stackTraceLimit","isError","constructorName","name","ctorName","slice","toLowerCase","replace","kindOf","typeOfVal","process","env","NODE_ENV","$$observable","isPlainObject","a","createStore","reducer","preloadedState","enhancer","arguments","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","getState","subscribe","listener","isSubscribed","push","index","indexOf","splice","dispatch","action","listeners","i","length","replaceReducer","nextReducer","[object Object]","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","this","console","error","e","warning","reducers","reducerKeys","keys","finalReducers","key","finalReducerKeys","unexpectedKeyCache","shapeAssertionError","forEach","initialState","assertReducerShape","state","warningMessage","inputState","argumentName","unexpectedKeys","filter","hasOwnProperty","getUnexpectedStateShapeWarningMessage","hasChanged","nextState","previousStateForKey","nextStateForKey","actionType","String","bindActionCreator","actionCreator","apply","actionCreators","boundActionCreators","funcs","arg","reduce","b","args","compose","middlewares","store","middlewareAPI","chain","map","middleware","skylark","combineReducers","bindActionCreators","applyMiddleware","__DO_NOT_USE__ActionTypes","slylark","attach","main"],"mappings":"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","file":"../skylark-redux.js","sourcesContent":["define('skylark-redux/utils/symbol-observable',[],function () {\n    'use strict';\n    return (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n});\ndefine('skylark-redux/utils/actionTypes',[],function () {\n    'use strict';\n    const randomString = () => Math.random().toString(36).substring(7).split('').join('.');\n    const ActionTypes = {\n        INIT: `@@redux/INIT${ randomString() }`,\n        REPLACE: `@@redux/REPLACE${ randomString() }`,\n        PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${ randomString() }`\n    };\n    return ActionTypes;\n});\ndefine('skylark-redux/utils/isPlainObject',[],function () {\n    'use strict';\n    return function isPlainObject(obj) {\n        if (typeof obj !== 'object' || obj === null)\n            return false;\n        let proto = obj;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(obj) === proto;\n    };\n});\ndefine('skylark-redux/utils/kindOf',[],function () {\n    'use strict';\n    function miniKindOf(val) {\n        if (val === void 0)\n            return 'undefined';\n        if (val === null)\n            return 'null';\n        const type = typeof val;\n        switch (type) {\n        case 'boolean':\n        case 'string':\n        case 'number':\n        case 'symbol':\n        case 'function': {\n                return type;\n            }\n        default:\n            break;\n        }\n        if (Array.isArray(val))\n            return 'array';\n        if (isDate(val))\n            return 'date';\n        if (isError(val))\n            return 'error';\n        const constructorName = ctorName(val);\n        switch (constructorName) {\n        case 'Symbol':\n        case 'Promise':\n        case 'WeakMap':\n        case 'WeakSet':\n        case 'Map':\n        case 'Set':\n            return constructorName;\n        default:\n            break;\n        }\n        return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n    }\n    function ctorName(val) {\n        return typeof val.constructor === 'function' ? val.constructor.name : null;\n    }\n    function isError(val) {\n        return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n    }\n    function isDate(val) {\n        if (val instanceof Date)\n            return true;\n        return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n    }\n    function kindOf(val) {\n        let typeOfVal = typeof val;\n        if (process.env.NODE_ENV !== 'production') {\n            typeOfVal = miniKindOf(val);\n        }\n        return typeOfVal;\n    }\n    return { kindOf: kindOf };\n});\ndefine('skylark-redux/createStore',[\n    './utils/symbol-observable',\n    './utils/actionTypes',\n    './utils/isPlainObject',\n    './utils/kindOf'\n], function ($$observable, ActionTypes, isPlainObject, a) {\n    'use strict';\n    return function createStore(reducer, preloadedState, enhancer) {\n        if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n            throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n        }\n        if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n            enhancer = preloadedState;\n            preloadedState = undefined;\n        }\n        if (typeof enhancer !== 'undefined') {\n            if (typeof enhancer !== 'function') {\n                throw new Error(`Expected the enhancer to be a function. Instead, received: '${ a.kindOf(enhancer) }'`);\n            }\n            return enhancer(createStore)(reducer, preloadedState);\n        }\n        if (typeof reducer !== 'function') {\n            throw new Error(`Expected the root reducer to be a function. Instead, received: '${ a.kindOf(reducer) }'`);\n        }\n        let currentReducer = reducer;\n        let currentState = preloadedState;\n        let currentListeners = [];\n        let nextListeners = currentListeners;\n        let isDispatching = false;\n        function ensureCanMutateNextListeners() {\n            if (nextListeners === currentListeners) {\n                nextListeners = currentListeners.slice();\n            }\n        }\n        function getState() {\n            if (isDispatching) {\n                throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n            }\n            return currentState;\n        }\n        function subscribe(listener) {\n            if (typeof listener !== 'function') {\n                throw new Error(`Expected the listener to be a function. Instead, received: '${ a.kindOf(listener) }'`);\n            }\n            if (isDispatching) {\n                throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n            }\n            let isSubscribed = true;\n            ensureCanMutateNextListeners();\n            nextListeners.push(listener);\n            return function unsubscribe() {\n                if (!isSubscribed) {\n                    return;\n                }\n                if (isDispatching) {\n                    throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n                }\n                isSubscribed = false;\n                ensureCanMutateNextListeners();\n                const index = nextListeners.indexOf(listener);\n                nextListeners.splice(index, 1);\n                currentListeners = null;\n            };\n        }\n        function dispatch(action) {\n            if (!isPlainObject(action)) {\n                throw new Error(`Actions must be plain objects. Instead, the actual type was: '${ a.kindOf(action) }'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);\n            }\n            if (typeof action.type === 'undefined') {\n                throw new Error('Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n            }\n            if (isDispatching) {\n                throw new Error('Reducers may not dispatch actions.');\n            }\n            try {\n                isDispatching = true;\n                currentState = currentReducer(currentState, action);\n            } finally {\n                isDispatching = false;\n            }\n            const listeners = currentListeners = nextListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                const listener = listeners[i];\n                listener();\n            }\n            return action;\n        }\n        function replaceReducer(nextReducer) {\n            if (typeof nextReducer !== 'function') {\n                throw new Error(`Expected the nextReducer to be a function. Instead, received: '${ a.kindOf(nextReducer) }`);\n            }\n            currentReducer = nextReducer;\n            dispatch({ type: ActionTypes.REPLACE });\n        }\n        function observable() {\n            const outerSubscribe = subscribe;\n            return {\n                subscribe(observer) {\n                    if (typeof observer !== 'object' || observer === null) {\n                        throw new TypeError(`Expected the observer to be an object. Instead, received: '${ a.kindOf(observer) }'`);\n                    }\n                    function observeState() {\n                        if (observer.next) {\n                            observer.next(getState());\n                        }\n                    }\n                    observeState();\n                    const unsubscribe = outerSubscribe(observeState);\n                    return { unsubscribe };\n                },\n                [$$observable]() {\n                    return this;\n                }\n            };\n        }\n        dispatch({ type: ActionTypes.INIT });\n        return {\n            dispatch,\n            subscribe,\n            getState,\n            replaceReducer,\n            [$$observable]: observable\n        };\n    };\n});\ndefine('skylark-redux/utils/warning',[],function () {\n    'use strict';\n    return function warning(message) {\n        if (typeof console !== 'undefined' && typeof console.error === 'function') {\n            console.error(message);\n        }\n        try {\n            throw new Error(message);\n        } catch (e) {\n        }\n    };\n});\ndefine('skylark-redux/combineReducers',[\n    './utils/actionTypes',\n    './utils/warning',\n    './utils/isPlainObject',\n    './utils/kindOf'\n], function (ActionTypes, warning, isPlainObject, a) {\n    'use strict';\n    function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n        const reducerKeys = Object.keys(reducers);\n        const argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n        if (reducerKeys.length === 0) {\n            return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n        }\n        if (!isPlainObject(inputState)) {\n            return `The ${ argumentName } has unexpected type of \"${ a.kindOf(inputState) }\". Expected argument to be an object with the following ` + `keys: \"${ reducerKeys.join('\", \"') }\"`;\n        }\n        const unexpectedKeys = Object.keys(inputState).filter(key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);\n        unexpectedKeys.forEach(key => {\n            unexpectedKeyCache[key] = true;\n        });\n        if (action && action.type === ActionTypes.REPLACE)\n            return;\n        if (unexpectedKeys.length > 0) {\n            return `Unexpected ${ unexpectedKeys.length > 1 ? 'keys' : 'key' } ` + `\"${ unexpectedKeys.join('\", \"') }\" found in ${ argumentName }. ` + `Expected to find one of the known reducer keys instead: ` + `\"${ reducerKeys.join('\", \"') }\". Unexpected keys will be ignored.`;\n        }\n    }\n    function assertReducerShape(reducers) {\n        Object.keys(reducers).forEach(key => {\n            const reducer = reducers[key];\n            const initialState = reducer(undefined, { type: ActionTypes.INIT });\n            if (typeof initialState === 'undefined') {\n                throw new Error(`The slice reducer for key \"${ key }\" returned undefined during initialization. ` + `If the state passed to the reducer is undefined, you must ` + `explicitly return the initial state. The initial state may ` + `not be undefined. If you don't want to set a value for this reducer, ` + `you can use null instead of undefined.`);\n            }\n            if (typeof reducer(undefined, { type: ActionTypes.PROBE_UNKNOWN_ACTION() }) === 'undefined') {\n                throw new Error(`The slice reducer for key \"${ key }\" returned undefined when probed with a random type. ` + `Don't try to handle '${ ActionTypes.INIT }' or other actions in \"redux/*\" ` + `namespace. They are considered private. Instead, you must return the ` + `current state for any unknown actions, unless it is undefined, ` + `in which case you must return the initial state, regardless of the ` + `action type. The initial state may not be undefined, but can be null.`);\n            }\n        });\n    }\n    return function combineReducers(reducers) {\n        const reducerKeys = Object.keys(reducers);\n        const finalReducers = {};\n        for (let i = 0; i < reducerKeys.length; i++) {\n            const key = reducerKeys[i];\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof reducers[key] === 'undefined') {\n                    warning(`No reducer provided for key \"${ key }\"`);\n                }\n            }\n            if (typeof reducers[key] === 'function') {\n                finalReducers[key] = reducers[key];\n            }\n        }\n        const finalReducerKeys = Object.keys(finalReducers);\n        let unexpectedKeyCache;\n        if (process.env.NODE_ENV !== 'production') {\n            unexpectedKeyCache = {};\n        }\n        let shapeAssertionError;\n        try {\n            assertReducerShape(finalReducers);\n        } catch (e) {\n            shapeAssertionError = e;\n        }\n        return function combination(state = {}, action) {\n            if (shapeAssertionError) {\n                throw shapeAssertionError;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n                if (warningMessage) {\n                    warning(warningMessage);\n                }\n            }\n            let hasChanged = false;\n            const nextState = {};\n            for (let i = 0; i < finalReducerKeys.length; i++) {\n                const key = finalReducerKeys[i];\n                const reducer = finalReducers[key];\n                const previousStateForKey = state[key];\n                const nextStateForKey = reducer(previousStateForKey, action);\n                if (typeof nextStateForKey === 'undefined') {\n                    const actionType = action && action.type;\n                    throw new Error(`When called with an action of type ${ actionType ? `\"${ String(actionType) }\"` : '(unknown type)' }, the slice reducer for key \"${ key }\" returned undefined. ` + `To ignore an action, you must explicitly return the previous state. ` + `If you want this reducer to hold no value, you can return null instead of undefined.`);\n                }\n                nextState[key] = nextStateForKey;\n                hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n            }\n            hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n            return hasChanged ? nextState : state;\n        };\n    };\n});\ndefine('skylark-redux/bindActionCreators',['./utils/kindOf'], function (a) {\n    'use strict';\n    function bindActionCreator(actionCreator, dispatch) {\n        return function () {\n            return dispatch(actionCreator.apply(this, arguments));\n        };\n    }\n    return function bindActionCreators(actionCreators, dispatch) {\n        if (typeof actionCreators === 'function') {\n            return bindActionCreator(actionCreators, dispatch);\n        }\n        if (typeof actionCreators !== 'object' || actionCreators === null) {\n            throw new Error(`bindActionCreators expected an object or a function, but instead received: '${ a.kindOf(actionCreators) }'. ` + `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`);\n        }\n        const boundActionCreators = {};\n        for (const key in actionCreators) {\n            const actionCreator = actionCreators[key];\n            if (typeof actionCreator === 'function') {\n                boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n            }\n        }\n        return boundActionCreators;\n    };\n});\ndefine('skylark-redux/compose',[],function () {\n    'use strict';\n    return function compose(...funcs) {\n        if (funcs.length === 0) {\n            return arg => arg;\n        }\n        if (funcs.length === 1) {\n            return funcs[0];\n        }\n        return funcs.reduce((a, b) => (...args) => a(b(...args)));\n    };\n});\ndefine('skylark-redux/applyMiddleware',['./compose'], function (compose) {\n    'use strict';\n    return function applyMiddleware(...middlewares) {\n        return createStore => (...args) => {\n            const store = createStore(...args);\n            let dispatch = () => {\n                throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n            };\n            const middlewareAPI = {\n                getState: store.getState,\n                dispatch: (...args) => dispatch(...args)\n            };\n            const chain = middlewares.map(middleware => middleware(middlewareAPI));\n            dispatch = compose(...chain)(store.dispatch);\n            return {\n                ...store,\n                dispatch\n            };\n        };\n    };\n});\ndefine('skylark-redux/main',[\n    \"skylark-langx-ns\",\n    './createStore',\n    './combineReducers',\n    './bindActionCreators',\n    './applyMiddleware',\n    './compose',\n    './utils/warning',\n    './utils/actionTypes'\n], function (\n    skylark,\n    createStore, \n    combineReducers, \n    bindActionCreators, \n    applyMiddleware, \n    compose, \n    warning, \n    __DO_NOT_USE__ActionTypes\n) {\n    'use strict';\n\n    function isCrushed() {\n    }\n    \n    return slylark.attach(\"intg.redux\",{\n        createStore,\n        combineReducers,\n        bindActionCreators,\n        applyMiddleware,\n        compose,\n        __DO_NOT_USE__ActionTypes\n    });\n});\ndefine('skylark-redux', ['skylark-redux/main'], function (main) { return main; });\n\n"]}